#!/usr/bin/env python3
import _gitz

GIT = _gitz.GIT


USAGE = """
git-split:  Split a range of commits into many single-file commits

Usage:

    git-split [<pathspec>]
"""

HELP = """
`git-split` squashes together a range of commits and the staging area, then
splits out a sequence of individual commits, one for each file changed.

Examples:

    git-split
        Splits the staging area if it's not empty, otherwise HEAD

    git-split HEAD
        Splits the squash of the staging area and HEAD

    git-split HEAD~
        Splits the squash of the staging area, HEAD and HEAD~
"""
PROGRAM = _gitz.Program(USAGE, HELP)


def git_split(commit=None):
    try:
        GIT.cd_root()
    except ValueError:
        PROGRAM.error_and_exit('Not in a git directory')

    if commit is not None:
        commit += '~'
    elif GIT.is_workspace_dirty():
        commit = 'HEAD'
    else:
        commit = 'HEAD~'

    commit = GIT.commit_id(commit)
    GIT.reset('--soft', commit)
    lines = GIT.status('--porcelain')

    GIT.reset(commit)
    commit_count = 0

    for line in lines:
        mode, filenames = line.split(maxsplit=1)
        filenames_split = filenames.split(' -> ')
        mode = mode.strip()
        if mode == '??':
            mode = 'R' if len(filenames_split) > 1 else 'A'
        mode_name = NAMES[mode]

        # Renaming is a special case with two files on a line
        # separated by -> and with mode = '??'
        try:
            GIT.add(*filenames_split)
            GIT.commit('-m', '"[split] %s %s"' % (mode_name, filenames))
            commit_count += 1

        except Exception:
            PROGRAM.error("couldn't commit filenames", filenames)

    s = '' if commit_count == 1 else 's'
    print('%d commit%s generated' % (commit_count, s))


NAMES = 'Added', 'Deleted', 'Modified', 'Renamed'
NAMES = {name[0]: name for name in NAMES}

if __name__ == '__main__':
    PROGRAM.exit_on_help()
    git_split(*PROGRAM.argv)
